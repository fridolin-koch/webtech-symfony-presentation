<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <title>Listen to the Symfony by Fridolin Koch</title>
    <!-- CSS dependencies -->
    <link rel="stylesheet" href="assets/css/bootstrap.min.css">
    <link rel="stylesheet" href="assets/css/github.css">
    <link rel="stylesheet" href="assets/css/font-awesome.min.css">
    <!-- Google Fonts -->
    <link href='http://fonts.googleapis.com/css?family=Open+Sans:400,300,600,700' rel='stylesheet' type='text/css'>
    <!-- Additional css -->
    <style>
        body {
            padding-top: 20px;
            padding-bottom: 20px;
            font-family: 'Open Sans', sans-serif;
        }
        p {
            line-height: 1.6;
        }
        a {
            font-weight: bold;
        }
        .navbar {
            margin-bottom: 20px;
        }
        .footer {
            margin-top: 20px;
            border-top: 1px solid #808080;
        }
        img {
            margin:20px 0;
        }
    </style>
</head>
<body data-spy="scroll" data-target="#navbar">
    <div class="container">
        <div class="row">
            <!-- Main content -->
            <div class="col-xs-12" role="main">

                <div class="page-header">
                    <h1>Listen to the Symfony <small>a brief introduction into Symfony2</small></h1>
                </div>

                <h2 id="section1">1. Introduction</h2>

                <p>In this tutorial I will show you how to create a very simple Issue-Tracker using the web application framework <a href="http://symfony.com/">Symfony 2</a>.
                    The complete solution is available on <a href="https://github.com/fridolin-koch/tum-webtech-symfony/">GitHub</a>. Therefore this document contains only important code passages.
                    I assume that the reader of this document is familiar with the basic concepts of object oriented programming, uml, relational databases, sql, html, css especially <a href="http://getbootstrap.com/">Bootstrap 3</a> - and php.
                </p>

                <p></p>

                <p><strong>What this tutorial is about</strong><br>
                    This tutorial is about <a href="http://symfony.com/">Symfony 2</a>, <a href="http://www.doctrine-project.org/projects/orm.html">Doctrine2</a> and <a href="http://twig.sensiolabs.org/">Twig</a>. It covers the following topics:
                <ul>
                    <li><a href="#section2">Setting up a environment for using Symfony</a></li>
                    <li><a href="#section3">Installing and configuring Symfony</a></li>
                    <li><a href="#section4">Creating the Model using Doctrine 2</a></li>
                    <li><a href="#section5">Controllers & Routing</a></li>
                    <li><a href="#section6">Templating</a></li>
                </ul>

                <hr>

                <h2 id="section2">2. Environment requirements</h2>

                <p>
                    Personally I recommend using a UNIX based system, but every OS that supports at least <a href="http://php.net/downloads.php">PHP 5.3.3</span></a> and <a href="http://dev.mysql.com/downloads/mysql/">MySQL</span></a> should be fine.
                    In this tutorial I'll assume that you are using a UNIX based system. Symfony has also some <a href="http://symfony.com/doc/current/reference/requirements.html">requirements <span class="fa fa-external-link"></span></a>, your system needs to fulfill.
                    If you are new to PHP I recommend you to use the Vagrant file from the <a href="#section21">next</a> section.
                </p>

                <hr>

                <!-- Vagrant -->
                <h3 id="section21">2.1 Vagrant</h3>
                <p>
                    This <a href="https://www.vagrantup.com/">Vagrant</a> file uses simple <a href="https://docs.vagrantup.com/v2/provisioning/shell.html">Shell-Provisioning</span></a> for creating a LAMP environment that works with Symfony2
                </p>
                <table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></div></td><td class="code"><div class="highlight"><pre><span class="c1"># Vagrantfile API/syntax version. Don&#39;t touch unless you know what you&#39;re doing!</span>
<span class="no">VAGRANTFILE_API_VERSION</span> <span class="o">=</span> <span class="s2">&quot;2&quot;</span>

<span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="no">VAGRANTFILE_API_VERSION</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
<span class="c1"># All Vagrant configuration is done here. The most common configuration</span>
<span class="c1"># options are documented and commented below. For a complete reference,</span>
<span class="c1"># please see the online documentation at vagrantup.com.</span>

<span class="c1"># Every Vagrant virtual environment requires a box to build off of.</span>
<span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;phusion/ubuntu-14.04-amd64&quot;</span>

<span class="c1">#No Autoupdate</span>
<span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box_check_update</span> <span class="o">=</span> <span class="kp">false</span>

<span class="c1"># Create a private network, which allows host-only access to the machine</span>
<span class="c1"># using a specific IP.</span>
<span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;private_network&quot;</span><span class="p">,</span> <span class="ss">ip</span><span class="p">:</span> <span class="s2">&quot;192.168.10.10&quot;</span>

<span class="c1">#set hostname</span>
<span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">hostname</span> <span class="o">=</span> <span class="s2">&quot;symfony.dev&quot;</span>

<span class="c1">#Bridge</span>
<span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;public_network&quot;</span>

<span class="c1"># Sync current folder</span>
<span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">synced_folder</span> <span class="s2">&quot;./&quot;</span><span class="p">,</span> <span class="s2">&quot;/var/www/app&quot;</span><span class="p">,</span> <span class="ss">group</span><span class="p">:</span> <span class="s2">&quot;www-data&quot;</span><span class="p">,</span> <span class="ss">owner</span><span class="p">:</span> <span class="s2">&quot;www-data&quot;</span><span class="p">,</span> <span class="ss">mode</span><span class="p">:</span> <span class="mo">0775</span>

<span class="c1">#provisioning</span>
<span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> <span class="ss">path</span><span class="p">:</span> <span class="s2">&quot;./provision.sh&quot;</span><span class="p">,</span> <span class="ss">privileged</span><span class="p">:</span> <span class="kp">true</span>

<span class="k">end</span>
</pre></div>
</td></tr></table>
                <table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59</pre></div></td><td class="code"><div class="highlight"><pre><span class="c">#!/bin/bash</span>

<span class="nv">MYSQL_PASSWORD</span><span class="o">=</span><span class="s2">&quot;symfony2&quot;</span>

<span class="c"># update</span>
apt-get update
<span class="c"># set mysql password</span>
debconf-set-selections <span class="o">&lt;&lt;&lt;</span> <span class="s2">&quot;mysql-server mysql-server/root_password password </span><span class="si">${</span><span class="nv">MYSQL_PASSWORD</span><span class="si">}</span><span class="s2">&quot;</span>
debconf-set-selections <span class="o">&lt;&lt;&lt;</span> <span class="s2">&quot;mysql-server mysql-server/root_password_again password </span><span class="si">${</span><span class="nv">MYSQL_PASSWORD</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="c"># install dependencies</span>
apt-get install -y <span class="se">\</span>
    php5 <span class="se">\</span>
    php5-cli <span class="se">\</span>
    php5-curl <span class="se">\</span>
    php5-gd <span class="se">\</span>
    php5-memcached <span class="se">\</span>
    php5-imagick <span class="se">\</span>
    php5-imap <span class="se">\</span>
    php5-mysql <span class="se">\</span>
    php5-json <span class="se">\</span>
    php5-xsl <span class="se">\</span>
    php5-mcrypt <span class="se">\</span>
    php5-intl <span class="se">\</span>
    php5-xcache <span class="se">\</span>
    php5-mongo <span class="se">\</span>
    libssh2-php <span class="se">\</span>
    php5-mcrypt <span class="se">\</span>
    php5-intl <span class="se">\</span>
    git <span class="se">\</span>
    mysql-server <span class="se">\</span>
    apache2 <span class="se">\</span>
    libapache2-mod-php5

<span class="c">#enable mod_rewrite</span>
a2enmod rewrite
<span class="c"># configure</span>
cat <span class="o">&lt;&lt;&lt;</span> EOT &gt; /etc/apache2/sites-available/000-default.conf
&lt;VirtualHost *:80&gt;
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/notifair/web
    &lt;Directory /var/www/notifair/web&gt;
        <span class="c"># enable the .htaccess rewrites</span>
        AllowOverride All
        Order allow,deny
        Allow from All
        &lt;/Directory&gt;
    ErrorLog <span class="si">${</span><span class="nv">APACHE_LOG_DIR</span><span class="si">}</span>/error.log
    CustomLog <span class="si">${</span><span class="nv">APACHE_LOG_DIR</span><span class="si">}</span>/access.log combined
&lt;/VirtualHost&gt;
EOT
<span class="c"># restart apache</span>
service apache2 restart

<span class="c"># prepare mysql database</span>
<span class="nb">echo</span> <span class="s2">&quot;CREATE DATABASE symfony2 CHARACTER SET utf8 COLLATE utf8_general_ci;&quot;</span> <span class="p">|</span> mysql -u root -p<span class="nv">$MYSQL_PASSWORD</span>

<span class="c"># install composer globally</span>
curl -sS https://getcomposer.org/installer <span class="p">|</span> php
mv composer.phar /usr/local/bin/composer
</pre></div>
</td></tr></table>

                <h2 id="section3">3. Setting up Symfony</h2>

                <p>Recently the Symfony team introduced the <a href="http://symfony.com/blog/introducing-the-new-symfony-installer">Symfony Installer</a> which makes it very easy to install Symfony into a certain directory:</p>
                <table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5</pre></div></td><td class="code"><div class="highlight"><pre><span class="c"># Download the symfony installer</span>
sudo curl -LsS http://symfony.com/installer -o /usr/local/bin/symfony
sudo chmod a+x /usr/local/bin/symfony
<span class="c"># Create a new project</span>
symfony new projectmgr
</pre></div>
</td></tr></table>

                <p>Next we need to configure the database connection, this is done inside <code>app/config/parameters.yml</code>:</p>

                <table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></div></td><td class="code"><div class="highlight"><pre><span class="c1"># This file is auto-generated during the composer install</span>
<span class="l-Scalar-Plain">parameters</span><span class="p-Indicator">:</span>
    <span class="l-Scalar-Plain">database_driver</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pdo_mysql</span>
    <span class="l-Scalar-Plain">database_host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">127.0.0.1</span>
    <span class="l-Scalar-Plain">database_port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3306</span>
    <span class="l-Scalar-Plain">database_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">symfony2</span>
    <span class="l-Scalar-Plain">database_user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">root</span>
    <span class="l-Scalar-Plain">database_password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">symfony2</span>
    <span class="l-Scalar-Plain">mailer_transport</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">smtp</span>
    <span class="l-Scalar-Plain">mailer_host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">127.0.0.1</span>
    <span class="l-Scalar-Plain">mailer_user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">null</span>
    <span class="l-Scalar-Plain">mailer_password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">null</span>
    <span class="l-Scalar-Plain">locale</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">en</span>
    <span class="l-Scalar-Plain">secret</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">358f26d5b77ddb670676159623617a9a5bcca519</span>
</pre></div>
</td></tr></table>

                <p>The Symfony 2 standard edition comes with some demo code, which is useless for our purpose. So we need to remove it.</p>

                <ol>
                    <li>Delete the directory <code>src/Acme</code></li>
                    <li>Remove the reference <code>new Acme\DemoBundle\AcmeDemoBundle()</code> from the application kernel in <code>app/AppKernel.php#24</code>.</li>
                    <li>Remove the reference to the bundle in <code>app/routing_dev.yml</code></li>
                </ol>

                <hr>

                <h2 id="section4">4. Creating the Model</h2>

                <p>This is the uml diagram of our Model. For reasons of clarity and comprehensibility getters and setters were omitted.</p>

                <img src="assets/images/dbmodel.png" class="img-responsive">

                <h3 id="section41">4.1 Creating the model</h3>

                <p>
                    Using <a href="http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/annotations-reference.html">annotations</a> is the recommend way of defining the orm mapping.
                    Of course you can also use Yaml, XML or PHP to define the mapping information of the Doctrine entities. That said, it is the <a href="http://symfony.com/doc/current/best_practices/business-logic.html#doctrine-mapping-information">best practice approach</a> to use annotations.
                    We start by implementing the class <code>AppBundle\Entity\TaskState</code>:
                </p>
                <table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32</pre></div></td><td class="code"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="c1">//src/AppBundle/Entity/TaskState.php</span>
<span class="k">namespace</span> <span class="nx">AppBundle\Entity</span><span class="p">;</span>

<span class="c1">//Important</span>
<span class="k">use</span> <span class="nx">Doctrine\ORM\Mapping</span> <span class="k">as</span> <span class="nx">ORM</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * @ORM\Entity</span>
<span class="sd"> * @ORM\Table(name=&quot;task_states&quot;)</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">TaskState</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @ORM\Id</span>
<span class="sd">     * @ORM\GeneratedValue(strategy=&quot;AUTO&quot;)</span>
<span class="sd">     * @ORM\Column(type=&quot;integer&quot;)</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$id</span><span class="p">;</span>

    <span class="sd">/**</span>
<span class="sd">     * @ORM\Column(type=&quot;string&quot;)</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$name</span><span class="p">;</span>

    <span class="sd">/**</span>
<span class="sd">     * @ORM\Column(type=&quot;string&quot;, nullable=true)</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$color</span><span class="p">;</span>

    <span class="c1">// getters and setters ...</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>

                <p>The fields <code>$name</code> and <code>$color</code> are self-explanatory. We use the <code>@Id</code> annotation to tell Doctrine that field <code>$id</code> is our primary key.
                    Further we tell Doctrine to use the strategy <code>AUTO</code> to generate the value of <code>$id</code>. This tells Doctrine to pick the strategy that is preferred by the used database platform.
                    In our case the choose strategy would be <code>IDENTITY</code> which makes use of the <a href="https://dev.mysql.com/doc/refman/5.6/en/example-auto-increment.html">MySQL AUTO_INCREMENT</a> attribute.<br>
                    The implantation process for <code>AppBundle\Entity\TaskType</code> and <code>AppBundle\Entity\TaskPriority</code> is equivalent, so we continue with the <code>AppBundle\Entity\TaskState</code> entity.</p>

                <table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74</pre></div></td><td class="code"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="k">namespace</span> <span class="nx">AppBundle\Entity</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Doctrine\Common\Collections\ArrayCollection</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Doctrine\ORM\Mapping</span> <span class="k">as</span> <span class="nx">ORM</span><span class="p">;</span>

<span class="sd">/**</span>
<span class="sd"> * @ORM\Entity</span>
<span class="sd"> * @ORM\Table(name=&quot;tasks&quot;)</span>
<span class="sd"> */</span>
<span class="k">class</span> <span class="nc">Task</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @ORM\Id</span>
<span class="sd">     * @ORM\GeneratedValue(strategy=&quot;AUTO&quot;)</span>
<span class="sd">     * @ORM\Column(type=&quot;integer&quot;)</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$id</span><span class="p">;</span>

    <span class="sd">/**</span>
<span class="sd">     * @ORM\ManyToOne(targetEntity=&quot;TaskPriority&quot;)</span>
<span class="sd">     * @ORM\JoinColumn(name=&quot;priority_id&quot;, referencedColumnName=&quot;id&quot;, nullable=false)</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$priority</span><span class="p">;</span>

    <span class="sd">/**</span>
<span class="sd">     * @ORM\ManyToOne(targetEntity=&quot;TaskType&quot;)</span>
<span class="sd">     * @ORM\JoinColumn(name=&quot;type_id&quot;, referencedColumnName=&quot;id&quot;, nullable=false)</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$type</span><span class="p">;</span>

    <span class="sd">/**</span>
<span class="sd">     * @ORM\ManyToOne(targetEntity=&quot;TaskState&quot;)</span>
<span class="sd">     * @ORM\JoinColumn(name=&quot;state_id&quot;, referencedColumnName=&quot;id&quot;, nullable=false)</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$state</span><span class="p">;</span>

    <span class="sd">/**</span>
<span class="sd">     * @ORM\ManyToOne(targetEntity=&quot;Project&quot;, inversedBy=&quot;tasks&quot;)</span>
<span class="sd">     * @ORM\JoinColumn(name=&quot;project_id&quot;, referencedColumnName=&quot;id&quot;, nullable=false, onDelete=&quot;CASCADE&quot;)</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$project</span><span class="p">;</span>

    <span class="sd">/**</span>
<span class="sd">     * @ORM\Column(type=&quot;string&quot;)</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$title</span><span class="p">;</span>

    <span class="sd">/**</span>
<span class="sd">     * @ORM\Column(type=&quot;text&quot;)</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$description</span><span class="p">;</span>

    <span class="sd">/**</span>
<span class="sd">     * @ORM\Column(type=&quot;datetime&quot;)</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$createDate</span><span class="p">;</span>

    <span class="sd">/**</span>
<span class="sd">     * @ORM\Column(type=&quot;datetime&quot;, nullable=true)</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$modifiedDate</span><span class="p">;</span>

    <span class="sd">/**</span>
<span class="sd">     * @ORM\Column(type=&quot;datetime&quot;, nullable=true)</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$dueDate</span><span class="p">;</span>

    <span class="sd">/**</span>
<span class="sd">     * @ORM\Column(type=&quot;integer&quot;, nullable=true)</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$timeEstimated</span><span class="p">;</span>

    <span class="c1">// getters and setters...</span>
</pre></div>
</td></tr></table>

                <p>At this point it's getting exciting since we are now defining the associations between the entities. Let's take a look at the annotations of the <code>$state</code> field.
                    The first annotation <code>@ManyToOne</code> defines a unidirectional association to the <code>TaskState</code> entity. On is internally represented by a foreign key.
                    The second annotation <code>@JoinColumn</code> defines the columns which are necessary for the join. It also defines that the task state cannot be null.
                    <code>$project</code> is the <a href="http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/unitofwork-associations.html">owning</a> side of a bidirectional association to the <code>AppBundle\Entity\Project</code> entity.
                    This means Doctrine loads all tasks into the corresponding Project-Object, particularly in the field <code>AppBundle\Entity\Project$tasks</code>:
                </p>

                <table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre>1
2
3
4
5
6
7
8
9</pre></div></td><td class="code"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="k">class</span> <span class="nc">Project</span>
<span class="p">{</span>
    <span class="sd">/**</span>
<span class="sd">     * @ORM\OneToMany(targetEntity=&quot;Task&quot;, mappedBy=&quot;project&quot;)</span>
<span class="sd">     * @ORM\OrderBy({&quot;modifiedDate&quot; = &quot;ASC&quot;})</span>
<span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$tasks</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>

                <div class="alert alert-info">
                    <strong>Note</strong><br> There are many more association types which can be used.
                    The <a href="http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/association-mapping.html">doctrine documentation</a> is a excellent reference if you want to know more about association mapping.
                </div>

                <p>After implementing all entities according to the uml model, you should have the following classes resp. files in <code>src/AppBundle/Entity</code>:</p>
                <ul>
                    <li>Comment</li>
                    <li>Project</li>
                    <li>Task</li>
                    <li>TaskPriority</li>
                    <li>TaskState</li>
                    <li>TaskType</li>
                </ul>

                <p>
                    The last step is to generate sql code resp. create the database schema from our model. This is very and takes only a few seconds. Head over to the commandline and cd into the root directory of the project.
                    Now you can run <code>php app/console doctrine:schema:create</code> which tell Doctrine to create from our mapping.
                </p>

                <h3 id="section42">4.2 Data fixtures</h3>

                <p>Now we want to add some defaults to our database. Fortunately there is a very handy bundle called <a href="http://symfony.com/doc/current/bundles/DoctrineFixturesBundle/index.html">DoctrineFixturesBundle</a> which can handle this task.
                The <a href="http://symfony.com/doc/current/bundles/DoctrineFixturesBundle/index.html#setup-and-configuration">Setup and Configuration</a> is described very well.
                Next we define a new fixtures in <code>src/DataFixtures/ORM/LoadDefaultData.php</code> which creates default values for TaskPriority, TaskState and TaskType.
                </p>

                <table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67</pre></div></td><td class="code"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="k">namespace</span> <span class="nx">AppBundle\DataFixtures\ORM</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">AppBundle\Entity\TaskPriority</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">AppBundle\Entity\TaskState</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">AppBundle\Entity\TaskType</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Doctrine\Common\DataFixtures\FixtureInterface</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Doctrine\Common\Persistence\ObjectManager</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">LoadDefaultData</span> <span class="k">implements</span> <span class="nx">FixtureInterface</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">load</span><span class="p">(</span><span class="nx">ObjectManager</span> <span class="nv">$manager</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">//define task priories</span>
        <span class="nv">$priorities</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">[</span><span class="s1">&#39;Low&#39;</span><span class="p">,</span> <span class="s1">&#39;#467edb&#39;</span><span class="p">],</span>
            <span class="p">[</span><span class="s1">&#39;Normal&#39;</span><span class="p">,</span> <span class="s1">&#39;#000&#39;</span><span class="p">],</span>
            <span class="p">[</span><span class="s1">&#39;High&#39;</span><span class="p">,</span> <span class="s1">&#39;#fe8a8a&#39;</span><span class="p">],</span>
            <span class="p">[</span><span class="s1">&#39;Urgend&#39;</span><span class="p">,</span> <span class="s1">&#39;#f21f1f&#39;</span><span class="p">],</span>
        <span class="p">];</span>
        <span class="c1">//create all priorities</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$priorities</span> <span class="k">as</span> <span class="nv">$priority</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TaskPriority</span><span class="p">();</span>
            <span class="nv">$obj</span>
                <span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="nv">$priority</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
                <span class="o">-&gt;</span><span class="na">setColor</span><span class="p">(</span><span class="nv">$priority</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>

            <span class="nv">$manager</span><span class="o">-&gt;</span><span class="na">persist</span><span class="p">(</span><span class="nv">$obj</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">//define task states</span>
        <span class="nv">$states</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">[</span><span class="s1">&#39;New&#39;</span><span class="p">,</span> <span class="s1">&#39;#000&#39;</span><span class="p">],</span>
            <span class="p">[</span><span class="s1">&#39;In Progress&#39;</span><span class="p">,</span> <span class="s1">&#39;#000&#39;</span><span class="p">],</span>
            <span class="p">[</span><span class="s1">&#39;Resolved&#39;</span><span class="p">,</span> <span class="s1">&#39;#000&#39;</span><span class="p">],</span>
            <span class="p">[</span><span class="s1">&#39;Feedback&#39;</span><span class="p">,</span> <span class="s1">&#39;#000&#39;</span><span class="p">],</span>
            <span class="p">[</span><span class="s1">&#39;Closed&#39;</span><span class="p">,</span> <span class="s1">&#39;#000&#39;</span><span class="p">],</span>
            <span class="p">[</span><span class="s1">&#39;Rejected&#39;</span><span class="p">,</span> <span class="s1">&#39;#000&#39;</span><span class="p">],</span>
        <span class="p">];</span>
        <span class="c1">//create all priorities</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$states</span> <span class="k">as</span> <span class="nv">$state</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TaskState</span><span class="p">();</span>
            <span class="nv">$obj</span>
                <span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="nv">$state</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
                <span class="o">-&gt;</span><span class="na">setColor</span><span class="p">(</span><span class="nv">$state</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>

            <span class="nv">$manager</span><span class="o">-&gt;</span><span class="na">persist</span><span class="p">(</span><span class="nv">$obj</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">//define task types</span>
        <span class="nv">$types</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">[</span><span class="s1">&#39;Bug&#39;</span><span class="p">],</span>
            <span class="p">[</span><span class="s1">&#39;Feature&#39;</span><span class="p">],</span>
            <span class="p">[</span><span class="s1">&#39;Task&#39;</span><span class="p">],</span>
        <span class="p">];</span>
        <span class="c1">//create all types</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$types</span> <span class="k">as</span> <span class="nv">$type</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TaskType</span><span class="p">();</span>
            <span class="nv">$obj</span><span class="o">-&gt;</span><span class="na">setName</span><span class="p">(</span><span class="nv">$type</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>

            <span class="nv">$manager</span><span class="o">-&gt;</span><span class="na">persist</span><span class="p">(</span><span class="nv">$obj</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">//write all changes to database</span>
        <span class="nv">$manager</span><span class="o">-&gt;</span><span class="na">flush</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>

                <p>The code is executed by invoking <code>php app/console doctrine:fixtures:load</code>. This command will purge your database and then execute all classes in <code>src/DataFixtures/ORM/</code> which are implementing the <code>Doctrine\Common\DataFixtures\FixtureInterface</code></p>

                <hr>

                <h2>5. Controller &amp; Routing</h2>

                <p>
                    Symfony comes with an interactive CURD generator which you can use. Generating the controller, the routes and the views is often a good staring point - especially when you are new to Symfony.
                    This is how the process looks for our project entity:
                </p>

                <table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48</pre></div></td><td class="code"><div class="highlight"><pre><span class="nv">$ </span>app/console generate:doctrine:crud

  Welcome to the Doctrine2 CRUD generator



This <span class="nb">command </span>helps you generate CRUD controllers and templates.

First, you need to give the entity <span class="k">for</span> which you want to generate a CRUD.
You can give an entity that does not exist yet and the wizard will <span class="nb">help</span>
you defining it.

You must use the shortcut notation like AcmeBlogBundle:Post.

The Entity shortcut name: AppBundle:Project

By default, the generator creates two actions: list and show.
You can also ask it to generate <span class="s2">&quot;write&quot;</span> actions: new, update, and delete.

Do you want to generate the <span class="s2">&quot;write&quot;</span> actions <span class="o">[</span>no<span class="o">]</span>? yes

Determine the format to use <span class="k">for</span> the generated CRUD.

Configuration format <span class="o">(</span>yml, xml, php, or annotation<span class="o">)</span> <span class="o">[</span>annotation<span class="o">]</span>:

Determine the routes prefix <span class="o">(</span>all the routes will be <span class="s2">&quot;mounted&quot;</span> under this
prefix: /prefix/, /prefix/new, ...<span class="o">)</span>.

Routes prefix <span class="o">[</span>/project<span class="o">]</span>:


  Summary before generation


You are going to generate a CRUD controller <span class="k">for</span> <span class="s2">&quot;AppBundle:Project&quot;</span>
using the <span class="s2">&quot;annotation&quot;</span> format.

Do you confirm generation <span class="o">[</span>yes<span class="o">]</span>?


  CRUD generation


Generating the CRUD code: OK
Generating the Form code: OK


  You can now start using the generated code!
</pre></div>
</td></tr></table>

                <p>We can now access the controller using our browser, just go to /project. Repeat this for the Task entitiy</p>

                <hr>

                <h2>6. Exploring the templates</h2>

                <p>
                    Maybe you noticed that the generated views are just plain html without any stylesheet. So it's time to prettify our application, <a href="">Bootstrap</a> is a clever and easy way to do so.
                    We create a base template named <code>layout.html.twig</code> which contains all the stylesheets:
                </p>

                <table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61</pre></div></td><td class="code"><div class="highlight"><pre><span class="x">&lt;!DOCTYPE html&gt;</span>
<span class="x">&lt;html lang=&quot;en&quot;&gt;</span>
<span class="x">&lt;head&gt;</span>
<span class="x">    &lt;meta charset=&quot;utf-8&quot;&gt;</span>
<span class="x">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span>
<span class="x">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span>

<span class="x">    &lt;title&gt;MyProjectManagement&lt;/title&gt;</span>

<span class="x">    &lt;!-- CSS --&gt;</span>
<span class="x">    </span><span class="cp">{%</span> <span class="k">stylesheets</span>
    <span class="s1">&#39;bundles/app/css/bootstrap.min.css&#39;</span>
    <span class="s1">&#39;bundles/app/css/font-awesome.min.css&#39;</span>
    <span class="s1">&#39;bundles/app/css/app.css&#39;</span>
    <span class="nv">output</span><span class="o">=</span><span class="s2">&quot;css/app.css&quot;</span>
    <span class="nv">filter</span><span class="o">=</span><span class="s2">&quot;cssrewrite&quot;</span> <span class="cp">%}</span><span class="x"></span>
<span class="x">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;</span><span class="cp">{{</span> <span class="nv">asset_url</span> <span class="cp">}}</span><span class="x">&quot; /&gt;</span>
<span class="x">    </span><span class="cp">{%</span> <span class="k">endstylesheets</span> <span class="cp">%}</span><span class="x"></span>
<span class="x">    &lt;link href=&#39;http://fonts.googleapis.com/css?family=Open+Sans:400,300,600,700&#39; rel=&#39;stylesheet&#39; type=&#39;text/css&#39;&gt;</span>

<span class="x">&lt;/head&gt;</span>

<span class="x">&lt;body&gt;</span>
<span class="x">&lt;!-- Fixed navbar --&gt;</span>
<span class="x">&lt;nav class=&quot;navbar navbar-default navbar-fixed-top&quot;&gt;</span>
<span class="x">    &lt;div class=&quot;container&quot;&gt;</span>
<span class="x">        &lt;div class=&quot;navbar-header&quot;&gt;</span>
<span class="x">            &lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#navbar&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;navbar&quot;&gt;</span>
<span class="x">                &lt;span class=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt;</span>
<span class="x">                &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</span>
<span class="x">                &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</span>
<span class="x">                &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</span>
<span class="x">            &lt;/button&gt;</span>
<span class="x">            &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;&lt;span class=&quot;fa fa-tachometer&quot;&gt;&lt;/span&gt; Project Management&lt;/a&gt;</span>
<span class="x">        &lt;/div&gt;</span>
<span class="x">        &lt;div id=&quot;navbar&quot; class=&quot;navbar-collapse collapse&quot;&gt;</span>
<span class="x">            &lt;ul class=&quot;nav navbar-nav&quot;&gt;</span>
<span class="x">                &lt;li</span><span class="cp">{%</span> <span class="k">if</span> <span class="nv">app.request.get</span><span class="o">(</span><span class="s1">&#39;_route&#39;</span><span class="o">)</span> <span class="o">==</span> <span class="s1">&#39;project&#39;</span> <span class="cp">%}</span><span class="x"> class=&quot;active&quot;</span><span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span><span class="x">&gt;&lt;a href=&quot;</span><span class="cp">{{</span> <span class="nv">path</span><span class="o">(</span><span class="s1">&#39;project&#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="x">&quot;&gt;Projects&lt;/a&gt;&lt;/li&gt;</span>
<span class="x">            &lt;/ul&gt;</span>
<span class="x">            &lt;ul class=&quot;nav navbar-nav navbar-right&quot;&gt;</span>
<span class="x">                &lt;li</span><span class="cp">{%</span> <span class="k">if</span> <span class="nv">app.request.get</span><span class="o">(</span><span class="s1">&#39;_route&#39;</span><span class="o">)</span> <span class="o">==</span> <span class="s1">&#39;project_new&#39;</span> <span class="cp">%}</span><span class="x"> class=&quot;active&quot;</span><span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span><span class="x">&gt;&lt;a href=&quot;</span><span class="cp">{{</span> <span class="nv">path</span><span class="o">(</span><span class="s1">&#39;project_new&#39;</span><span class="o">)</span> <span class="cp">}}</span><span class="x">&quot;&gt;&lt;span class=&quot;fa fa-plus&quot;&gt;&lt;/span&gt; New Project&lt;/a&gt;&lt;/li&gt;</span>
<span class="x">            &lt;/ul&gt;</span>
<span class="x">        &lt;/div&gt;&lt;!--/.nav-collapse --&gt;</span>
<span class="x">    &lt;/div&gt;</span>
<span class="x">&lt;/nav&gt;</span>

<span class="x">&lt;div class=&quot;container&quot;&gt;</span>
<span class="x">    </span><span class="cp">{%</span> <span class="k">block</span> <span class="nv">main</span> <span class="cp">%}{%</span> <span class="k">endblock</span> <span class="cp">%}</span><span class="x"></span>

<span class="x">&lt;/div&gt; &lt;!-- /container --&gt;</span>

<span class="x">&lt;!-- Javascript --&gt;</span>
<span class="x">&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js&quot;&gt;&lt;/script&gt;</span>
<span class="cp">{%</span> <span class="k">javascripts</span>
<span class="s1">&#39;bundles/app/js/bootstrap.min.js&#39;</span>
<span class="nv">output</span><span class="o">=</span><span class="s1">&#39;js/app.js&#39;</span>
<span class="cp">%}</span><span class="x"></span>
<span class="x">&lt;script src=&quot;</span><span class="cp">{{</span> <span class="nv">asset_url</span> <span class="cp">}}</span><span class="x">&quot;&gt;&lt;/script&gt;</span>
<span class="cp">{%</span> <span class="k">endjavascripts</span> <span class="cp">%}</span><span class="x"></span>
<span class="x">&lt;/body&gt;</span>
<span class="x">&lt;/html&gt;</span>
</pre></div>
</td></tr></table>

                <p>You may have noticed the <code>{% stylesheets %}</code> and the <code>{% javascripts %}</code> blocks. This blocks are provided by the AsseticBundle which provides many features for dealing with assets.
                    You can read about it <a href="http://symfony.com/doc/current/cookbook/assetic/asset_management.html">here</a>.<br><br>
                    Next we need to customize out templates, to inherit the base template. This is quite simple, we do this by changing <code>{% extends '::base.html.twig' %}</code> to <code>{% extends 'AppBundle::layout.html.twig' %}</code>

                </p>


            </div>

        </div>
        <!-- Footer -->
        <footer class="footer">
            <div class="container">
                <p class="text-muted">Author Fridolin Koch 6th of April, 2015</p>
            </div>
        </footer>
    </div>
    <!-- Javascript -->
    <script src="assets/js/jquery-2.1.3.min.js"></script>
    <script src="assets/js/bootstrap.min.js"></script>
</body>
</html>
